{"version":3,"file":"main.29ae5390ece0bcfdb829.js","mappings":"wFACA,IAAqDA,EAArDC,GAAqDD,EAArDE,EAAA,OAAqDF,EAAAG,WAAAH,EAAA,CAAAI,QAAAJ,GAErD,MAAMK,EAAWC,SAASC,cAA+B,aACnDC,EAAWH,EAASI,SAAmB,SACvCC,EAAeL,EAASI,SAAuB,aAC/CE,EAAgBN,EAASI,SAAwB,cAEjDG,EAAa,IAAIC,EAAAA,QAAmBR,EAAU,CAClDS,qBAAsB,CACpBC,MAAO,OACPC,qBAAqB,EACrBC,uBAAuB,GAEzBC,iBAAkB,CAChBC,sBAAsB,EACtBC,oCAAoC,KAIxCR,EACGS,SACC,WACA,CAAC,CACCC,SAAAA,CAAUC,GACR,OAAOA,EAAWC,MACpB,EACAC,aAAc,WAEhB,CACEC,kBAAmB,CACjBC,IAAI,EACJC,SAAU,CACRC,QAAS,4CAEXC,oCAAoC,EACpCC,QAAS,CAAC,8CAEZC,mBAAoB,CAClBL,IAAI,EACJI,QAAS,CAAC,0CAIfV,SACC,eACA,CACE,CACEC,SAAAA,CAAUC,GACR,OAAOA,EAAWC,MACpB,EACAC,aAAc,UAEhB,CACEH,SAAAA,CAAUC,GAER,OAAOA,EAAWU,MADA,qBAEpB,EACAR,aAAc,WAGlB,CACEC,kBAAmB,CACjBC,IAAI,EACJC,SAAU,CACRC,QAAS,gDAEXC,oCAAoC,EACpCC,QAAS,CAAC,8CAEZC,mBAAoB,CAClBL,IAAI,EACJI,QAAS,CAAC,uCAIfV,SACC,gBACA,CAAC,CACGC,SAAAA,CAAUC,GACR,QAAKA,EAAWC,QAMTD,EAAWU,MAFC,2IAGrB,EACAR,aAAc,WAElB,CACEC,kBAAmB,CACjBC,IAAI,EACJC,SAAU,CACRC,QAAS,iDAEXC,oCAAoC,EACpCC,QAAS,CAAC,8CAEZC,mBAAoB,CAClBL,IAAI,EACJI,QAAS,CAAC,uCAIfV,SACC,cACA,CAAC,CACGC,SAAAA,CAAUC,GACR,OAAOA,CACT,EACAE,aAAc,wBAElB,CACEC,kBAAmB,CACjBC,IAAI,EACJC,SAAU,CACRM,OAAQ,wCAEVJ,oCAAoC,EACpCC,QAAS,CAAC,4CAEZC,mBAAoB,CAClBL,IAAI,EACJI,QAAS,CAAC,wDAKlBnB,EAAWuB,WACT,KACEC,MAAM,6CAA8C,CAClDC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBC,KAAMjC,EAASkC,MACfC,KAAMjC,EAAagC,MACnBE,MAAOjC,EAAc+B,QAEvBG,QAAS,CACP,eAAgB,qCAGjBC,MAAMC,GAAaA,EAASC,SAC5BF,MAAME,GAASC,QAAQC,IAAIF,IAAM,GAEtC,S,sBCjJF9C,EAAA,KAEAA,EAAA,KACAA,EAAA,I,sBCHAA,EAAA,I,2HCAA,MAAMiD,EAAW,CACfrC,qBAAsB,CACpBC,MAAO,KAEPC,qBAAqB,EAErBC,uBAAuB,EAEvBmC,kBAAmB,KAEnB1B,kBAAmB,CACjBC,IAAI,EACJC,SAAU,KACVyB,UAAW,KACXvB,oCAAoC,EACpCC,QAAS,MAGXuB,4BAA6B,CAC3B3B,IAAI,EACJ4B,eAAgB,KAChB3B,SAAU,KACVyB,UAAW,KACXG,iCAAiC,EACjCzB,QAAS,MAGXC,mBAAoB,CAClBL,IAAI,EACJI,QAAS,MAGX0B,iBAAkB,CAChB9B,IAAI,EACJI,QAAS,OAIbb,iBAAkB,CAChBC,sBAAsB,EACtBC,oCAAoC,ICtCxC,SAASsC,EAAY1D,EAAK2D,EAAUC,GAAgB,GAClD,GAAIA,EAAe,CACjB,MAAMC,ECJV,SAA6B7D,GAC3B,IAAI8D,EAAgBC,OAAOC,eAAehE,GACtCiE,EAA0B,GAE9B,KAAOH,GAAe,CACpB,MAAMI,EAAUH,OAAOI,oBAAoBL,GAC3CI,EAAQE,OAAOF,EAAQG,QAAQ,eAAgB,GAC/CJ,EAA0B,IAAIA,KAA4BC,GAC1DJ,EAAgBC,OAAOC,eAAeF,EACxC,CAEA,MAAO,IAAIC,OAAOI,oBAAoBnE,MAASiE,EACjD,CDRuBK,CAAoBtE,GACvC,OAAO6D,EAAWU,SAASZ,EAC7B,CAEA,OAAOI,OAAOS,UAAUC,eAAeC,KAAK1E,EAAK2D,EACnD,CETA,SAASgB,EAASC,GAChB,MACqB,iBAAZA,IAAyBC,MAAMC,QAAQF,IAAwB,OAAZA,CAE9D,CCDA,SAASG,EAAa5B,EAAU6B,GAC9B,MAAMC,EAAiB,CAAC,EA2BxB,OAzBAlB,OAAOmB,KAAK/B,GAAUgC,SAASC,IACzB1B,EAAYsB,EAAQI,GAClBT,EAASxB,EAASiC,IAChBT,EAASK,EAAOI,IAClBH,EAAeG,GAASL,EAAa5B,EAASiC,GAAQJ,EAAOI,IAE7DH,EAAeG,GAAS,IACnBjC,EAASiC,MACTJ,EAAOI,IAIdH,EAAeG,GAASJ,EAAOI,GAGjCH,EAAeG,GAASjC,EAASiC,EACnC,IAGFrB,OAAOmB,KAAKF,GAAQG,SAASC,IACtB1B,EAAYP,EAAUiC,KACzBH,EAAeG,GAASJ,EAAOI,GACjC,IAGKH,CACT,CChCA,SAASI,EAAarF,GACpB,IACE,OAAOA,aAAesF,WACxB,CAAE,MAAOC,GACP,MAAM,IAAIC,UAAU,oCACtB,CACF,CCNA,SAASC,EAAmB9C,GAC1B,OAAOA,EAAK+C,OAAO,GAAGC,cAAgBhD,EAAKiD,UAAU,GAAGC,aAC1D,CCFA,SAASC,EAASC,EAAS,IACzB,OACEA,GAEwB,OAArB,EAAIC,KAAKC,UAAuB,GAAGC,SAAS,IAAIN,UAAU,EAEjE,CCNA,SAASO,EAAevB,GACtB,YAAuB,IAAZA,GAGJA,EAAQwB,UACjB,CCLA,MAAMC,UAAwBb,UAC5B,WAAAc,CAAYC,GACVC,MAAMD,GACkBE,KAER9D,KAAO,iBACzB,ECQF,MAAM9B,EACJ,WAAAyF,CAAYI,EAAeC,EAAe,CAAC,GACzC,MAAMC,EAAqBH,KAE3BG,EAAmBD,aAAe5B,EAAa5B,EAAUwD,GAEzDC,EAAmBC,cAAgB,IAAIC,IAEvCF,EAAmBG,KAAO,CAAC,EAC3BH,EAAmBG,KAAKC,KAAO3B,EAAaqB,GACxCA,EACApG,SAASC,cAAcmG,GAC3BE,EAAmBG,KAAKE,aACtBL,EAAmBG,KAAKC,KAAKvG,SAC/BmG,EAAmBG,KAAKG,YAAa,EACrCN,EAAmBG,KAAKI,aAAc,EAEtCP,EAAmBQ,OAAS,CAAC,EAC7BR,EAAmBS,mBAAqB,CAAC,EACzCT,EAAmBU,UAAY,CAAC,EAEhCV,EAAmBG,KAAKC,KAAKO,aAAa,aAAc,cACxDX,EAAmBY,YACjB,SACAZ,EAAmBG,KAAKC,MACvBjG,GAAUA,EAAM0G,kBACjB,kBAEFb,EAAmBY,YACjB,SACAZ,EAAmBG,KAAKC,KACxBJ,EAAmB1F,iBAAiBwG,KAAKd,GACzC,qBAEJ,CAEA,WAAAY,CAAYG,EAAMX,EAAMY,EAASC,GAC/B,MAAMjB,EAAqBH,KAE3B,IAAIqB,EAAoB,KAsBxB,OApBA/D,OAAOgE,OAAOnB,EAAmBQ,QAAQjC,SAAS6C,IAC5CA,EAAMhB,OAASA,IACjBc,EAAoBE,EACtB,KAGwBF,EACtBA,EAAkBjB,cAClBD,EAAmBC,eAELoB,IAChB,CACEJ,cACAF,QAEFC,GAGFZ,EAAKkB,iBAAiBP,EAAMC,GAErBhB,CACT,CAEA,cAAAuB,CAAeR,EAAMX,EAAMa,GACzB,MAAMjB,EAAqBH,KAE3B,IAAIqB,EAAoB,KAExBlB,EAAmBQ,OAAOjC,SAAS6C,IAC7BA,EAAMhB,OAASA,IACjBc,EAAoBE,EACtB,IAGF,MAAMI,EAAoBN,EACtBA,EAAkBjB,cAClBD,EAAmBC,cAUvB,OARAuB,EAAkBlD,OAAOC,SAASkD,IAC5BA,EAAIV,OAASA,GAAQU,EAAIR,cAAgBA,IAC3Cb,EAAKsB,oBAAoBD,EAAIV,KAAMS,EAAkBG,IAAIF,IAEzDD,EAAkBI,OAAOH,GAC3B,IAGKzB,CACT,CAEA,QAAAvF,CAAS2G,EAAOS,EAAOC,EAAS,CAAC,GAC/B,MAAM9B,EAAqBH,KAE3B,IAAK5B,MAAMC,QAAQ2D,GACjB,OAAO7B,EAGT,GAAqB,IAAjB6B,EAAME,OACR,OAAO/B,EAGT,IAAII,EAAO,KAUX,GAPEA,EADE3B,EAAa2C,GACRA,EAEAtE,EAAYkD,EAAmBG,KAAKE,aAAce,GACrDpB,EAAmBG,KAAKE,aAAae,GACrC1H,SAASC,cAAcyH,IAGxBhB,EACH,OAAOJ,EAGT,MAAMgC,EACJ5B,EAAK6B,aAAa,SAClB,0BAA0B9E,OAAOmB,KAAK0B,EAAmBQ,QAAQuB,SAiCnE,OA/BAD,EAAS3D,EACP6B,EAAmBD,aAAa7F,qBAChC4H,GAGF9B,EAAmBQ,OAAOwB,GAAa,CACrC5B,OACA8B,aAAc9B,EAAK8B,aACnBL,QACA5B,cAAe,IAAIC,IACnBiC,SAAS,EACTC,oBAAoB,EACpBC,cAAc,EACd1F,eAAgB,KAChB9B,aAAc,KACdyH,qBAAqB,EACrBC,uBAAuB,EACvBT,UAGF9B,EAAmBwC,mBAAmBpB,GAEtCpB,EAAmBQ,OACjBwB,GACAF,OAAOW,kCAAoC,CAC3CN,QAASnC,EAAmBQ,OAAOwB,GAAWG,QAC9CC,mBACEpC,EAAmBQ,OAAOwB,GAAWI,mBACvCC,aAAcrC,EAAmBQ,OAAOwB,GAAWK,cAG9CrC,CACT,CAEA,kBAAAwC,CAAmBpB,GACjB,MAAMpB,EAAqBH,KAE3BuB,EAAQpB,EAAmB0C,eAAetB,GAE1C,MAAMuB,EAAe,CACnBC,OAAQ,IAGVxB,EAAMS,MAAMtD,SAASsE,IACnB,IAAI1I,EAAQ,KAEV2C,EAAY+F,EAAM,UAClBA,EAAK1I,OACiB,iBAAf0I,EAAK1I,MAEZA,EAAQ0I,EAAK1I,MAEb2C,EAAYsE,EAAMU,OAAQ,UAC1BV,EAAMU,OAAO3H,OACiB,iBAAvBiH,EAAMU,OAAO3H,QAEpBA,EAAQiH,EAAMU,OAAO3H,OAGnBA,EACG2C,EAAY6F,EAAcxI,GAG7BwI,EAAaxI,GAAO2I,KAAKD,GAFzBF,EAAaxI,GAAS,CAAC0I,GAKzBF,EAAaC,OAAOE,KAAKD,EAC3B,IAGFzB,EAAMuB,aAAeA,EAErBxF,OAAOmB,KAAK8C,EAAMuB,cAAcpE,SAASpE,IACzB,WAAVA,GACF6F,EAAmBY,YACjBzG,EACAiH,EAAMhB,KACNJ,EAAmB+C,qBAAqBjC,KAAKd,GAC7C,kBAAkBnB,EAAmB1E,KAEzC,GAEJ,CAEA,WAAA6I,CAAY5B,GACV,MAAMpB,EAAqBH,KAiB3B,OAfAuB,EAAQpB,EAAmB0C,eAAetB,IAEpCnB,cAAc3B,OAAOC,SAASkD,IAClCzB,EAAmBuB,eAAeE,EAAIV,KAAMK,EAAMhB,KAAMqB,EAAIR,YAAY,IAG1EjB,EAAmBiD,gBAAgB7B,GACnCpB,EAAmBkD,aAAa9B,GAEhCjE,OAAOmB,KAAK0B,EAAmBQ,QAAQjC,SAASyD,IAC1ChC,EAAmBQ,OAAOwB,KAAeZ,UACpCpB,EAAmBQ,OAAOwB,EACnC,IAGKhC,CACT,CAEA,aAAAmD,CAAc/B,GAGZ,IAAIgC,EAAa,KAEjB,MAAMC,EAJqBxD,KAIY6C,eAAetB,IAChD,KAAEhB,GAASiD,EAEjB,OAAQjD,EAAKW,MACX,IAAK,WACHqC,EAAahD,EAAKkD,QAElB,MAEF,IAAK,OACHF,EAAahD,EAAKmD,MAElB,MAEF,QACEH,EAAahD,EAAKtE,MAQtB,OAJIgB,EAAYsE,EAAMU,OAAQ,sBAAwBV,EAAMU,OAAOtF,oBACjE4G,EAAahC,EAAMU,OAAOtF,kBAAkB4G,IAGvCA,CACT,CAEA,cAAAV,CAAetB,GAGb,MAAwB,iBAAVA,EAAqBA,EAFRvB,KAEmCW,OAAOY,EACvE,CAEA,WAAAoC,CAAYC,EAAc,MACxB,MAAMzD,EAAqBH,KAE3B,GAAI4D,EAAJ,CACE,MAAMrC,EAAQpB,EAAmB0C,eAAee,GAEhD,OAAQrC,EAAMhB,KAAKW,MACjB,IAAK,WACHK,EAAMhB,KAAKkD,QAAUlC,EAAMc,aAC3B,MAEF,IAAK,OACHd,EAAMhB,KAAKmD,MAAQnC,EAAMc,aACzB,MAEF,QACEd,EAAMhB,KAAKtE,MAAQsF,EAAMc,aAI/B,MAEAlC,EAAmBG,KAAKC,KAAKsD,OAC/B,CAEA,uBAAAC,CACEF,EAAc,KACdxG,EAAa,CAAC,UAAW,qBAAsB,kBAIhCwG,EACX,CAHuB5D,KAGH6C,eAAee,IACnCtG,OAAOgE,OAJgBtB,KAIUW,SAE9BjC,SAAS6C,IACdnE,EAAWsB,SAASxB,IAClBqE,EAAMrE,GACJqE,EAAMU,OAAOW,kCAAkC1F,EAAS,GAC1D,GAEN,CAEA,OAAA6G,CAAQH,EAAc,MACpB,MAAMzD,EAAqBH,KAE3BG,EAAmBwD,YAAYC,GAC/BzD,EAAmB6D,eAAeJ,GAAa,GAC/CzD,EAAmB2D,wBAAwBF,EAC7C,CAEA,YAAAK,CAAa1C,GAKX,IAAIe,GAAU,EAEd,OAJAf,EAF2BvB,KAEA6C,eAAetB,IAI/BgB,oBAKNhB,EAAMe,UACTA,GAAU,GAILA,IATLA,GAAU,EACHA,EASX,CAEA,WAAA4B,GACE,MAAM/D,EAAqBH,KAE3B,IAAIsC,GAAU,EAQd,OANAhF,OAAOgE,OAAOnB,EAAmBQ,QAAQjC,SAAS6C,IAC3CpB,EAAmB8D,aAAa1C,KACnCe,GAAU,EACZ,IAGKA,CACT,CAEA,sBAAM7H,CAAiBH,GACrB,MAAM6F,EAAqBH,KAE3B,GAAIG,EAAmBG,KAAKG,WAC1B,OAGF,MAAMwB,EAAS9B,EAAmBD,aAAazF,iBAE3CwH,EAAOvH,sBACTyF,EAAmBgE,WAGjBlH,EAAYkD,EAAmBU,UAAW,kCACtCV,EAAmBU,UAAUuD,wBACjC9J,EACA6F,EAAmBG,MAIvBH,EAAmBG,KAAKG,YAAa,EACrCN,EAAmBG,KAAKI,aAAc,QAEhC2D,QAAQC,IAAIhH,OAAOgE,OAAOnB,EAAmBS,qBAEnD,MAAM2D,EAAO,GAEbjH,OAAOmB,KAAK0B,EAAmBQ,QAAQjC,SAASyD,IAC9C,MAAMZ,EAAQpB,EAAmB0C,eAAeV,GAEhD,IAAKZ,EAAMiB,cAAgBP,EAAOtH,mCAAoC,CACpE,MAAM6J,EAAYnF,EAAS8C,GAC3BhC,EAAmBS,mBAAmB4D,GAAarE,EAChDsE,cAAclD,GACdlF,MAAMS,IACLyE,EAAMzE,eAAiBA,EAAe2C,UAAU,IAEjDiF,OAAOC,IACN,GAAmB,oBAAfA,EAAMzI,KACR,MAAMyI,EAGRpD,EAAMvG,aAAe2J,EAAM7E,QAAQL,UAAU,IAE9CmF,SAAQ,KACPzE,EAAmB0E,gBAAgBtD,GACnCpB,EAAmB6D,eAAezC,GAClCpB,EAAmB2E,eAAevD,GAClCpB,EAAmB4E,eAAexD,UAE3BpB,EAAmBS,mBAAmB4D,EAAU,IAG3DD,EAAKtB,KAAK9C,EAAmBS,mBAAmB4D,GAClD,WAGIH,QAAQC,IAAIC,GAEdpE,EAAmB+D,eACjBjH,EAAYkD,EAAmBU,UAAW,0BACtCV,EAAmBU,UAAUmE,gBACjC1K,EACA6F,EAAmBG,MAGvBH,EAAmBG,KAAKI,aAAc,EAEtCP,EAAmB4D,YAGf9G,EAAYkD,EAAmBU,UAAW,uBACtCV,EAAmBU,UAAUoE,aACjC3K,EACA6F,EAAmBG,MAIvBH,EAAmB2D,wBAAwB,KAAM,CAAC,kBAGhD7G,EAAYkD,EAAmBU,UAAW,gCACtCV,EAAmBU,UAAUqE,sBACjC5K,EACA6F,EAAmBG,MAIvBH,EAAmBG,KAAKG,YAAa,EAEjCwB,EAAOvH,sBACTyF,EAAmBgF,YAEvB,CAEA,0BAAMjC,CAAqB5I,GACzB,MAAM6F,EAAqBH,MAErB,OAAEoF,EAAM,KAAElE,GAAS5G,EAEnB6H,EAAY7E,OAAOmB,KAAK0B,EAAmBQ,QAAQ0E,MAEtDlD,GACehC,EAAmBQ,OAAOwB,GAC9B5B,OAAS6E,IAOjB7D,EAAQpB,EAAmB0C,eAAeV,GAEhD,GACEZ,EAAMU,OAAO1H,sBACZ4F,EAAmBG,KAAKI,YAEzB,OAGF,MAAM4E,EAAsBtG,EAAmBkC,GAE3CK,EAAMU,OAAOzH,uBACf+G,EAAMhB,KAAKO,aAAa,WAAY,IAIpC7D,EACEkD,EAAmBU,UACnB,oBAAoByE,YAGhBnF,EAAmBU,UACvB,oBAAoByE,KACpBhL,EAAOiH,GAGX,MAAMiD,EAAYnF,EAAS8C,GAE3BhC,EAAmBS,mBAAmB4D,GAAarE,EAChDsE,cAAclD,GACdlF,MAAKkJ,MAAOzI,IACXyE,EAAMzE,eAAiBA,EAAe2C,WAGpCxC,EACEkD,EAAmBU,UACnB,YAAYyE,YAGRnF,EAAmBU,UAAU,YAAYyE,KAC7ChL,EACAiH,EAEJ,IAEDmD,OAAMa,MAAOZ,IACZ,GAAmB,oBAAfA,EAAMzI,KACR,MAAMyI,EAGRpD,EAAMvG,aAAe2J,EAAM7E,QAAQL,WAGjCxC,EACEkD,EAAmBU,UACnB,SAASyE,YAGLnF,EAAmBU,UAAU,SAASyE,KAC1ChL,EACAiH,EAEJ,IAEDqD,SAAQW,UACHhE,EAAMU,OAAOzH,uBACf+G,EAAMhB,KAAKiF,gBAAgB,YAG7BrF,EAAmB0E,gBAAgBtD,GACnCpB,EAAmB6D,eAAezC,GAClCpB,EAAmB2E,eAAevD,GAClCpB,EAAmB4E,eAAexD,UAE3BpB,EAAmBS,mBAAmB4D,GAG3CvH,EACEkD,EAAmBU,UACnB,kBAAkByE,YAGdnF,EAAmBU,UACvB,kBAAkByE,KAClBhL,EAAOiH,EACX,GAEN,CAEA,mBAAMkD,CAAclD,GAClB,MAAMpB,EAAqBH,MAE3BuB,EAAQpB,EAAmB0C,eAAetB,IACpCiB,cAAe,EAGrB,IAAK,MAAMQ,KAAQzB,EAAMS,MACvB,UAEQ7B,EAAmBsF,aAAalE,EAAOyB,EAC/C,CAAE,MAAO2B,GAEP,MADApD,EAAMe,SAAU,EACVqC,CACR,CAKF,OAFApD,EAAMe,SAAU,EAETrF,EAAYsE,EAAMU,OAAQ,kBAC7BV,EAAMU,OAAOnF,eACb,sBACN,CAEA,kBAAM2I,CAAalE,EAAOyB,GAGxB,IAAI0C,EAEJnE,EAJ2BvB,KAIA6C,eAAetB,GAC1C,MAAMgC,EALqBvD,KAKWsD,cAAc/B,GAcpD,GAXEmE,GADEzI,EAAY+F,EAAM,oBACLA,EAAKnI,UAAU0I,GAK3BrF,EAASwH,KACZA,EAAS,CACPA,YAICA,EAAOA,OAWV,MAVKzI,EAAYyI,EAAQ,kBACvBA,EAAO1K,aAAe,yBAElBiC,EAAY+F,EAAM,kBACpB0C,EAAO1K,aAAegI,EAAKhI,eAI/BgI,EAAKV,SAAU,EACff,EAAMgB,oBAAqB,EACrB,IAAI3C,EAAgB8F,EAAO1K,cAGnCgI,EAAKV,SAAU,EACff,EAAMgB,oBAAqB,EAE3BhB,EAAMS,MAAMtD,SAASsE,IACf/F,EAAY+F,EAAM,aACfA,EAAKV,UACRf,EAAMgB,oBAAqB,GAE/B,GAEJ,CAEA,iBAAAoD,CAAkBC,EAAUC,GAO1B,OAN2B7F,KAERa,UACjB,oBAAoB7B,EAAmB6G,MACrCD,EAJuB5F,IAO7B,CAEA,eAAA8F,CAAgBF,EAAUC,GAOxB,OAN2B7F,KAERa,UACjB,kBAAkB7B,EAAmB6G,MACnCD,EAJuB5F,IAO7B,CAEA,SAAAtE,CAAUkK,EAAUC,GAMlB,OAL2B7F,KAERa,UAAU,YAAY7B,EAAmB6G,MAC1DD,EAHyB5F,IAM7B,CAEA,MAAA+F,CAAOH,EAAUC,GAMf,OAL2B7F,KAERa,UAAU,SAAS7B,EAAmB6G,MACvDD,EAHyB5F,IAM7B,CAEA,cAAA8E,CAAelB,EAAc,MAC3B,MAAMzD,EAAqBH,MAEZ4D,EACX,CAACzD,EAAmB0C,eAAee,IACnCtG,OAAOgE,OAAOnB,EAAmBQ,SAE9BjC,SAAS6C,KAEXpB,EAAmB8D,aAAa1C,IACjCA,EAAMU,OAAOhH,kBAAkBC,GAG7BiF,EAAmB6F,2BAA2BzE,GACjC0E,YAAc1E,EAAMvG,aAEnCmF,EAAmB8D,aAAa1C,IAChCA,EAAMU,OAAOpF,4BAA4B3B,KAGvCiF,EAAmB6F,2BAA2BzE,GAC/B0E,YAAc1E,EAAMzE,eACvC,GAEJ,CAEA,cAAAkH,CAAeJ,EAAc,KAAMsC,GAAQ,GACzC,MAAM/F,EAAqBH,MAEZ4D,EACX,CAACzD,EAAmB0C,eAAee,IACnCtG,OAAOgE,OAAOnB,EAAmBQ,SAE9BjC,SAAS6C,IACd,MAAM,OAAEU,GAAWV,EAEdpB,EAAmB8D,aAAa1C,IAanCA,EAAMvG,aAAe,KACrBuG,EAAMkB,qBAAsB,EAExB/C,EAAe6B,EAAM4E,kBACvB5E,EAAM4E,eAAeF,YAAc,GAEjChE,EAAOpF,4BAA4BE,iCAEnCwE,EAAM4E,eAAeC,YApBzB7E,EAAMzE,eAAiB,KACvByE,EAAMmB,uBAAwB,EAE1BhD,EAAe6B,EAAM8E,oBACvB9E,EAAM8E,iBAAiBJ,YAAc,GAEnChE,EAAOpF,4BAA4BE,iCAEnCwE,EAAM8E,iBAAiBD,WAiBzBF,IACF3E,EAAMvG,aAAe,KACrBuG,EAAMkB,qBAAsB,EAC5BlB,EAAMzE,eAAiB,KACvByE,EAAMmB,uBAAwB,EAE1BhD,EAAe6B,EAAM8E,oBACvB9E,EAAM8E,iBAAiBJ,YAAc,GAEnChE,EAAOpF,4BAA4BE,iCAEnCwE,EAAM8E,iBAAiBD,UAIvB1G,EAAe6B,EAAM4E,kBACvB5E,EAAM4E,eAAeF,YAAc,GAEjChE,EAAOpF,4BAA4BE,iCAEnCwE,EAAM4E,eAAeC,UAG3B,GAEJ,CAEA,0BAAAJ,CAA2BzE,GACzB,MAAMpB,EAAqBH,KAE3B,IAAIsG,EAAmB,KAIvB,GACGrJ,EAHHsE,EAAQpB,EAAmB0C,eAAetB,GAGpB,mBACnBpB,EAAmB8D,aAAa1C,IAe5B,IACJtE,EAAYsE,EAAO,qBACpBpB,EAAmB8D,aAAa1C,GAChC,CACA,MAAMU,EAASV,EAAMU,OAAOpF,4BAExBoF,EAAOrF,UACT2E,EAAM8E,iBAAmBzH,EAAaqD,EAAOrF,WACzCqF,EAAOrF,UACP/C,SAASC,cAAcyH,IAE3BA,EAAM8E,iBAAmBxM,SAAS0M,cAAc,OAE5CtE,EAAO3G,SACTiG,EAAM8E,iBAAiBG,UAAUC,OAAOxE,EAAO3G,SAGrD,MA/BE,CACA,MAAM2G,EAASV,EAAMU,OAAOhH,kBAExBgH,EAAOrF,UACT2E,EAAM4E,eAAiBvH,EAAaqD,EAAOrF,WACvCqF,EAAOrF,UACP/C,SAASC,cAAcyH,IAE3BA,EAAM4E,eAAiBtM,SAAS0M,cAAc,OAE1CtE,EAAO3G,SACTiG,EAAM4E,eAAeK,UAAUC,OAAOxE,EAAO3G,SAGnD,CAyBA,OAHEgL,EAHGnG,EAAmB8D,aAAa1C,GAGhBA,EAAM8E,iBAFN9E,EAAM4E,eAKpBG,CACT,CAEA,cAAAvB,CAAenB,EAAc,MAC3B,MAAMzD,EAAqBH,MAEZ4D,EACX,CAACzD,EAAmB0C,eAAee,IACnCtG,OAAOgE,OAAOnB,EAAmBQ,SAE9BjC,SAAS6C,IACd,IAAI+E,EAAmB,KACnBI,EAA4B,KAEhC,IACEvG,EAAmB8D,aAAa1C,KCrzBxC,SAAiBtF,GACf,IAAI0K,EAAS1K,EAIb,MAHqB,iBAAVA,IACT0K,EAAS1K,EAAMlB,SAET4L,CACV,CDgzBQC,CAAQzG,EAAmBmD,cAAc/B,IAF3C,CAOA,GAAKpB,EAAmB8D,aAAa1C,GAS9B,CACL,MAAMU,EAASV,EAAMU,OAAOpF,4BAExBoF,EAAO/G,KACJwE,EAAe6B,EAAM8E,oBACxBC,EAAmB/E,EAAM8E,iBACzBK,EAA4BzE,EAAO9G,UAGzC,KAlB6C,CAC3C,MAAM8G,EAASV,EAAMU,OAAOhH,kBAExBgH,EAAO/G,KACJwE,EAAe6B,EAAM4E,kBACxBG,EAAmB/E,EAAM4E,eACzBO,EAA4BzE,EAAO9G,UAGzC,CAWA,KE/0BN,SACE0L,EACA1L,EAAW,CACTM,OAAQ,KACRL,QAAS,KACT0L,MAAO,KACPC,OAAQ,OAGV,IAAKF,EACH,MAAM,IAAI9H,UAAU,6CAGtB,IAAK5D,EACH,MAAM,IAAI4D,UAAU,kCAGtB,IAAIiI,EAEJ,QAA+B,IAApB7L,EAASM,OAClBuL,EAC6B,iBAApB7L,EAASM,OACZN,EAASM,OACT5B,SAASC,cAAcqB,EAASM,QACtCuL,EAAUvL,OAAOoL,QACZ,QAAgC,IAArB1L,EAAS8L,QACzBD,EAC8B,iBAArB7L,EAAS8L,QACZ9L,EAAS8L,QACTpN,SAASC,cAAcqB,EAAS8L,SACtCD,EAAUC,QAAQJ,QACb,QAA8B,IAAnB1L,EAAS2L,MACzBE,EAC4B,iBAAnB7L,EAAS2L,MACZ3L,EAAS2L,MACTjN,SAASC,cAAcqB,EAAS2L,OACtCE,EAAUF,MAAMD,OACX,SAA+B,IAApB1L,EAAS4L,OAOzB,MAAM,IAAIhI,UAAU,kCANpBiI,EAC6B,iBAApB7L,EAAS4L,OACZ5L,EAAS4L,OACTlN,SAASC,cAAcqB,EAAS4L,QACtCC,EAAUD,OAAOF,EAGnB,CACF,CFkyBQK,CAAOZ,EAAkBI,GAEpBvG,EAAmB8D,aAAa1C,GAGnCA,EAAMmB,uBAAwB,EAF9BnB,EAAMkB,qBAAsB,CAIhC,CAAE,MAAO3D,GACP,GACe,cAAbA,EAAI5C,MACY,mCAAhB4C,EAAIgB,QAEJyB,EAAMhB,KAAKuG,MAAMR,QACZ,GACQ,cAAbxH,EAAI5C,OACa,8CAAhB4C,EAAIgB,SACa,mCAAhBhB,EAAIgB,SAEN,MAAMhB,CAEV,CA3CA,CA2CA,GAEJ,CAEA,eAAA+F,CAAgBjB,EAAc,MAC5B,MAAMzD,EAAqBH,MAEZ4D,EACX,CAACzD,EAAmB0C,eAAee,IACnCtG,OAAOgE,OAAOnB,EAAmBQ,SAE9BjC,SAAS6C,IACd,MAAM,KAAEhB,EAAI,OAAE0B,GAAWV,EAErBpB,EAAmB8D,aAAa1C,IAC9BU,EAAO1G,mBAAmBD,SAC5BiF,EAAKiG,UAAUJ,UAAUnE,EAAO1G,mBAAmBD,SAGjD2G,EAAOjF,iBAAiB9B,IAAM+G,EAAOjF,iBAAiB1B,SACxDiF,EAAKiG,UAAUC,OAAOxE,EAAOjF,iBAAiB1B,WAG5C2G,EAAOjF,iBAAiB1B,SAC1BiF,EAAKiG,UAAUJ,UAAUnE,EAAOjF,iBAAiB1B,SAG/C2G,EAAO1G,mBAAmBL,IAAM+G,EAAO1G,mBAAmBD,SAC5DiF,EAAKiG,UAAUC,OAAOxE,EAAO1G,mBAAmBD,SAEpD,GAEJ,CAEA,QAAA6I,GACE,MAEMgD,EAFqBnH,KAEgBM,KAAKC,KAAK6G,iBACnD,mCAGFhJ,MAAMiJ,KAAKF,GAAiBzI,SAAS6C,IACnCA,EAAMT,aAAa,WAAY,IAC/BS,EAAM+F,MAAMC,cAAgB,OAC5BhG,EAAM+F,MAAME,aAAe,kBAC3BjG,EAAM+F,MAAMG,OAAS,iBAAiB,GAE1C,CAEA,UAAAtC,GACE,MAEMgC,EAFqBnH,KAEgBM,KAAKC,KAAK6G,iBACnD,mCAGFhJ,MAAMiJ,KAAKF,GAAiBzI,SAAS6C,IACnCA,EAAMiE,gBAAgB,YACtBjE,EAAM+F,MAAMC,cAAgB,GAC5BhG,EAAM+F,MAAME,aAAe,GAC3BjG,EAAM+F,MAAMG,OAAS,EAAE,GAE3B,E","sources":["webpack:///./src/about-us/__ssatForm/about-us__ssatForm.ts","webpack:///./src/index.ts","webpack:///./src/main/main.ts","webpack:///./node_modules/simpower-validation/core/defaults.js","webpack:///./node_modules/simpower-validation/core/modules/commonFunctions/hasProperty.js","webpack:///./node_modules/simpower-validation/core/modules/commonFunctions/getAllOwnProperties.js","webpack:///./node_modules/simpower-validation/core/modules/commonFunctions/isObject.js","webpack:///./node_modules/simpower-validation/core/modules/commonFunctions/extendParams.js","webpack:///./node_modules/simpower-validation/core/modules/commonFunctions/isDOMElement.js","webpack:///./node_modules/simpower-validation/core/modules/commonFunctions/normalizeEventName.js","webpack:///./node_modules/simpower-validation/core/modules/commonFunctions/createId.js","webpack:///./node_modules/simpower-validation/core/modules/commonFunctions/isElementInDOM.js","webpack:///./node_modules/simpower-validation/core/modules/errors/validationError/validationError.js","webpack:///./node_modules/simpower-validation/core/core.js","webpack:///./node_modules/simpower-validation/core/modules/commonFunctions/isEmpty.js","webpack:///./node_modules/simpower-validation/core/modules/commonFunctions/insert.js"],"sourcesContent":["// @ts-ignore\nimport SimpowerValidation from 'simpower-validation';\n\nconst ssatForm = document.querySelector<HTMLFormElement>('#ssatForm')!;\nconst ssatText = ssatForm.elements['ssatText' as any] as HTMLTextAreaElement;\nconst ssatUserName = ssatForm.elements['ssatUserName' as any] as HTMLInputElement;\nconst ssatUserEmail = ssatForm.elements['ssatUserEmail' as any] as HTMLInputElement;\n\nconst validation = new SimpowerValidation(ssatForm, {\n  validateFieldOnEvent: {\n    event: 'blur',\n    afterFirstSubmition: true,\n    lockInputOnValidation: false,\n  },\n  validateOnSubmit: {\n    lockFormOnValidation: false,\n    revalidateAllFieldsBeforeSubmition: false,\n  }\n});\n\nvalidation\n  .addField(\n    'ssatText',\n    [{\n      validator(inputValue: string) {\n        return inputValue.trim();\n      },\n      errorMessage: 'Ошибка',\n    }],\n    {\n      ruleErrorMessages: {\n        on: true,\n        position: {\n          prepand: '.about-us__ssatForm-field-group-ssatText',\n        },\n        removeContainerFromDOMAfterSuccess: true,\n        classes: ['about-us__ssatForm-field-validation-error'],\n      },\n      invalidViewOfField: {\n        on: true,\n        classes: ['about-us__ssatForm-textarea_invalid'],\n      },\n    }\n  )\n  .addField(\n    'ssatUserName',\n    [\n      {\n        validator(inputValue: string) {\n          return inputValue.trim();\n        },\n        errorMessage: 'Ошибка',\n      },\n      {\n        validator(inputValue: string) {\n          const nameRegEx = /^[а-яА-Я\\s]{1,40}$/;\n          return inputValue.match(nameRegEx);\n        },\n        errorMessage: 'Ошибка',\n      },\n    ],\n    {\n      ruleErrorMessages: {\n        on: true,\n        position: {\n          prepand: '.about-us__ssatForm-field-group-ssatUserName',\n        },\n        removeContainerFromDOMAfterSuccess: true,\n        classes: ['about-us__ssatForm-field-validation-error'],\n      },\n      invalidViewOfField: {\n        on: true,\n        classes: ['about-us__ssatForm-input_invalid'],\n      },\n    }\n  )\n  .addField(\n    'ssatUserEmail',\n    [{\n        validator(inputValue: string) {\n          if (!inputValue.trim()) {\n            return false\n          }\n\n          const emailRegEx = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n          return inputValue.match(emailRegEx);\n        },\n        errorMessage: 'Ошибка',\n    }],\n    {\n      ruleErrorMessages: {\n        on: true,\n        position: {\n          prepand: '.about-us__ssatForm-field-group-ssatUserEmail',\n        },\n        removeContainerFromDOMAfterSuccess: true,\n        classes: ['about-us__ssatForm-field-validation-error'],\n      },\n      invalidViewOfField: {\n        on: true,\n        classes: ['about-us__ssatForm-input_invalid'],\n      },\n    }\n  )\n  .addField(\n    'ssatConsent',\n    [{\n        validator(inputValue: boolean) {\n          return inputValue;\n        },\n        errorMessage: 'Необходимо согласие'\n    }],\n    {\n      ruleErrorMessages: {\n        on: true,\n        position: {\n          append: '.about-us__ssatForm-consent-checkbox',\n        },\n        removeContainerFromDOMAfterSuccess: true,\n        classes: ['about-us__ssatForm-consent-error_hidden'],\n      },\n      invalidViewOfField: {\n        on: true,\n        classes: ['about-us__ssatForm-consent-checkbox-input_invalid'],\n      },\n    }\n  );\n\nvalidation.onSuccess(\n  () => {\n    fetch('https://jsonplaceholder.typicode.com/posts', {\n      method: 'POST',\n      body: JSON.stringify({\n        text: ssatText.value,\n        name: ssatUserName.value,\n        email: ssatUserEmail.value,\n      }),\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8',\n      },\n    })\n      .then((response) => response.json())\n      .then((json) => console.log(json));\n  },\n  'submit'\n);\n","import './main/main.ts';\n\nimport './normalize.css';\nimport './index.css';\n","import '../about-us/__ssatForm/about-us__ssatForm.ts';\n","const defaults = {\n  validateFieldOnEvent: {\n    event: null,\n\n    afterFirstSubmition: true,\n\n    lockInputOnValidation: false,\n\n    fieldValueHandler: null,\n\n    ruleErrorMessages: {\n      on: true,\n      position: null,\n      container: null,\n      removeContainerFromDOMAfterSuccess: true,\n      classes: null,\n    },\n\n    successfulValidationMessage: {\n      on: false,\n      successMessage: null,\n      position: null,\n      container: null,\n      removeContainerFromDOMAfterFail: true,\n      classes: null,\n    },\n\n    invalidViewOfField: {\n      on: false,\n      classes: null,\n    },\n\n    validViewOfField: {\n      on: false,\n      classes: null,\n    },\n  },\n\n  validateOnSubmit: {\n    lockFormOnValidation: false,\n    revalidateAllFieldsBeforeSubmition: false,\n  },\n};\n\nexport { defaults };\n","import { getAllOwnProperties } from './getAllOwnProperties.js';\n\nfunction hasProperty(obj, property, allProperties = false) {\n  if (allProperties) {\n    const properties = getAllOwnProperties(obj);\n    return properties.includes(property);\n  }\n\n  return Object.prototype.hasOwnProperty.call(obj, property);\n}\n\nexport { hasProperty };\n","function getAllOwnProperties(obj) {\n  let lastPrototype = Object.getPrototypeOf(obj);\n  let allPropertiesAndGetters = [];\n\n  while (lastPrototype) {\n    const getters = Object.getOwnPropertyNames(lastPrototype);\n    getters.splice(getters.indexOf('constructor'), 1);\n    allPropertiesAndGetters = [...allPropertiesAndGetters, ...getters];\n    lastPrototype = Object.getPrototypeOf(lastPrototype);\n  }\n\n  return [...Object.getOwnPropertyNames(obj), ...allPropertiesAndGetters];\n}\n\nexport { getAllOwnProperties };\n","function isObject(element) {\n  return (\n    typeof element === 'object' && !Array.isArray(element) && element !== null\n  );\n}\n\nexport { isObject };\n","import { hasProperty } from './hasProperty.js';\nimport { isObject } from './isObject.js';\n\nfunction extendParams(defaults, params) {\n  const extendedParams = {};\n\n  Object.keys(defaults).forEach((param) => {\n    if (hasProperty(params, param)) {\n      if (isObject(defaults[param])) {\n        if (isObject(params[param])) {\n          extendedParams[param] = extendParams(defaults[param], params[param]);\n        } else {\n          extendedParams[param] = {\n            ...defaults[param],\n            ...params[param],\n          };\n        }\n      } else {\n        extendedParams[param] = params[param];\n      }\n    } else {\n      extendedParams[param] = defaults[param];\n    }\n  });\n\n  Object.keys(params).forEach((param) => {\n    if (!hasProperty(defaults, param)) {\n      extendedParams[param] = params[param];\n    }\n  });\n\n  return extendedParams;\n}\n\nexport { extendParams };\n","function isDOMElement(obj) {\n  try {\n    return obj instanceof HTMLElement;\n  } catch (err) {\n    throw new TypeError('The object is not part of W3 DOM2');\n  }\n}\n\nexport { isDOMElement };\n","function normalizeEventName(name) {\n  return name.charAt(0).toUpperCase() + name.substring(1).toLowerCase();\n}\n\nexport { normalizeEventName };\n","function createId(string = '') {\n  return (\n    string +\n    // eslint-disable-next-line no-bitwise\n    (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1)\n  );\n}\n\nexport { createId };\n","function isElementInDOM(element) {\n  if (typeof element === 'undefined') {\n    return false;\n  }\n  return element.parentNode;\n}\n\nexport { isElementInDOM };\n","class ValidationError extends TypeError {\n  constructor(message) {\n    super(message);\n    const validationError = this;\n\n    validationError.name = 'ValidationError';\n  }\n}\n\nexport { ValidationError };\n","import { defaults } from './defaults.js';\nimport {\n  extendParams,\n  isElementInDOM,\n  normalizeEventName,\n  hasProperty,\n  isObject,\n  insert,\n  isDOMElement,\n  createId,\n  isEmpty,\n} from './modules/commonFunctions/index.js';\nimport { ValidationError } from './modules/errors/validationError/index.js';\n\nclass SimpowerValidation {\n  constructor(parentElement, globalConfig = {}) {\n    const simpowerValidation = this;\n\n    simpowerValidation.globalConfig = extendParams(defaults, globalConfig);\n\n    simpowerValidation.eventHandlers = new Map();\n\n    simpowerValidation.form = {};\n    simpowerValidation.form.elem = isDOMElement(parentElement)\n      ? parentElement\n      : document.querySelector(parentElement);\n    simpowerValidation.form.formElements =\n      simpowerValidation.form.elem.elements;\n    simpowerValidation.form.submitting = false;\n    simpowerValidation.form.isSubmitted = false;\n\n    simpowerValidation.fields = {};\n    simpowerValidation.validationPromises = {};\n    simpowerValidation.callbacks = {};\n\n    simpowerValidation.form.elem.setAttribute('novalidate', 'novalidate');\n    simpowerValidation.addListener(\n      'submit',\n      simpowerValidation.form.elem,\n      (event) => event.preventDefault(),\n      'preventDefault'\n    );\n    simpowerValidation.addListener(\n      'submit',\n      simpowerValidation.form.elem,\n      simpowerValidation.validateOnSubmit.bind(simpowerValidation),\n      'validationOnSubmit'\n    );\n  }\n\n  addListener(type, elem, handler, handlerName) {\n    const simpowerValidation = this;\n\n    let fieldToBeValidate = null;\n\n    Object.values(simpowerValidation.fields).forEach((field) => {\n      if (field.elem === elem) {\n        fieldToBeValidate = field;\n      }\n    });\n\n    const handlersContainer = fieldToBeValidate\n      ? fieldToBeValidate.eventHandlers\n      : simpowerValidation.eventHandlers;\n\n    handlersContainer.set(\n      {\n        handlerName,\n        type,\n      },\n      handler\n    );\n\n    elem.addEventListener(type, handler);\n\n    return simpowerValidation;\n  }\n\n  removeListener(type, elem, handlerName) {\n    const simpowerValidation = this;\n\n    let fieldToBeValidate = null;\n\n    simpowerValidation.fields.forEach((field) => {\n      if (field.elem === elem) {\n        fieldToBeValidate = field;\n      }\n    });\n\n    const handlersContainer = fieldToBeValidate\n      ? fieldToBeValidate.eventHandlers\n      : simpowerValidation.eventHandlers;\n\n    handlersContainer.keys().forEach((key) => {\n      if (key.type === type && key.handlerName === handlerName) {\n        elem.removeEventListener(key.type, handlersContainer.get(key));\n\n        handlersContainer.delete(key);\n      }\n    });\n\n    return simpowerValidation;\n  }\n\n  addField(field, rules, config = {}) {\n    const simpowerValidation = this;\n\n    if (!Array.isArray(rules)) {\n      return simpowerValidation;\n    }\n\n    if (rules.length === 0) {\n      return simpowerValidation;\n    }\n\n    let elem = null;\n\n    if (isDOMElement(field)) {\n      elem = field;\n    } else {\n      elem = hasProperty(simpowerValidation.form.formElements, field)\n        ? simpowerValidation.form.formElements[field]\n        : document.querySelector(field);\n    }\n\n    if (!elem) {\n      return simpowerValidation;\n    }\n\n    const fieldName =\n      elem.getAttribute('name') ||\n      `simpowerValidationField${Object.keys(simpowerValidation.fields).length}`;\n\n    config = extendParams(\n      simpowerValidation.globalConfig.validateFieldOnEvent,\n      config\n    );\n\n    simpowerValidation.fields[fieldName] = {\n      elem,\n      defaultValue: elem.defaultValue,\n      rules,\n      eventHandlers: new Map(),\n      isValid: false,\n      isPotentiallyValid: false,\n      wasValidated: false,\n      successMessage: null,\n      errorMessage: null,\n      errorMessageIsShown: false,\n      successMessageIsShown: false,\n      config,\n    };\n\n    simpowerValidation.setValidationRules(field);\n\n    simpowerValidation.fields[\n      fieldName\n    ].config.propertiesToBeRestoreAfterRefresh = {\n      isValid: simpowerValidation.fields[fieldName].isValid,\n      isPotentiallyValid:\n        simpowerValidation.fields[fieldName].isPotentiallyValid,\n      wasValidated: simpowerValidation.fields[fieldName].wasValidated,\n    };\n\n    return simpowerValidation;\n  }\n\n  setValidationRules(field) {\n    const simpowerValidation = this;\n\n    field = simpowerValidation.getFieldObject(field);\n\n    const rulesByEvent = {\n      submit: [],\n    };\n\n    field.rules.forEach((rule) => {\n      let event = null;\n      if (\n        hasProperty(rule, 'event') &&\n        rule.event &&\n        typeof rule.event === 'string'\n      ) {\n        event = rule.event;\n      } else if (\n        hasProperty(field.config, 'event') &&\n        field.config.event &&\n        typeof field.config.event === 'string'\n      ) {\n        event = field.config.event;\n      }\n\n      if (event) {\n        if (!hasProperty(rulesByEvent, event)) {\n          rulesByEvent[event] = [rule];\n        } else {\n          rulesByEvent[event].push(rule);\n        }\n      } else {\n        rulesByEvent.submit.push(rule);\n      }\n    });\n\n    field.rulesByEvent = rulesByEvent;\n\n    Object.keys(field.rulesByEvent).forEach((event) => {\n      if (event !== 'submit') {\n        simpowerValidation.addListener(\n          event,\n          field.elem,\n          simpowerValidation.validateOnFieldEvent.bind(simpowerValidation),\n          `validateOnField${normalizeEventName(event)}`\n        );\n      }\n    });\n  }\n\n  removeField(field) {\n    const simpowerValidation = this;\n\n    field = simpowerValidation.getFieldObject(field);\n\n    field.eventHandlers.keys().forEach((key) => {\n      simpowerValidation.removeListener(key.type, field.elem, key.handlerName);\n    });\n\n    simpowerValidation.deleteSuccesses(field);\n    simpowerValidation.deleteErrors(field);\n\n    Object.keys(simpowerValidation.fields).forEach((fieldName) => {\n      if (simpowerValidation.fields[fieldName] === field) {\n        delete simpowerValidation.fields[fieldName];\n      }\n    });\n\n    return simpowerValidation;\n  }\n\n  getFieldValue(field) {\n    const simpowerValidation = this;\n\n    let fieldValue = null;\n\n    const fieldObject = simpowerValidation.getFieldObject(field);\n    const { elem } = fieldObject;\n\n    switch (elem.type) {\n      case 'checkbox': {\n        fieldValue = elem.checked;\n\n        break;\n      }\n      case 'file': {\n        fieldValue = elem.files;\n\n        break;\n      }\n      default: {\n        fieldValue = elem.value;\n      }\n    }\n\n    if (hasProperty(field.config, 'fieldValueHandler') && field.config.fieldValueHandler) {\n      fieldValue = field.config.fieldValueHandler(fieldValue);\n    }\n\n    return fieldValue;\n  }\n\n  getFieldObject(field) {\n    const simpowerValidation = this;\n\n    return typeof field === 'object' ? field : simpowerValidation.fields[field];\n  }\n\n  clearFields(singleField = null) {\n    const simpowerValidation = this;\n\n    if (singleField) {\n      const field = simpowerValidation.getFieldObject(singleField);\n\n      switch (field.elem.type) {\n        case 'checkbox': {\n          field.elem.checked = field.defaultValue;\n          break;\n        }\n        case 'file': {\n          field.elem.files = field.defaultValue;\n          break;\n        }\n        default: {\n          field.elem.value = field.defaultValue;\n        }\n      }\n      return;\n    }\n\n    simpowerValidation.form.elem.reset();\n  }\n\n  restoreFieldsProperties(\n    singleField = null,\n    properties = ['isValid', 'isPotentiallyValid', 'wasValidated']\n  ) {\n    const simpowerValidation = this;\n\n    const fields = singleField\n      ? [simpowerValidation.getFieldObject(singleField)]\n      : Object.values(simpowerValidation.fields);\n\n    fields.forEach((field) => {\n      properties.forEach((property) => {\n        field[property] =\n          field.config.propertiesToBeRestoreAfterRefresh[property];\n      });\n    });\n  }\n\n  refresh(singleField = null) {\n    const simpowerValidation = this;\n\n    simpowerValidation.clearFields(singleField);\n    simpowerValidation.deleteMessages(singleField, true);\n    simpowerValidation.restoreFieldsProperties(singleField);\n  }\n\n  isFieldValid(field) {\n    const simpowerValidation = this;\n\n    field = simpowerValidation.getFieldObject(field);\n\n    let isValid = true;\n\n    if (!field.isPotentiallyValid) {\n      isValid = false;\n      return isValid;\n    }\n\n    if (!field.isValid) {\n      isValid = false;\n      return isValid;\n    }\n\n    return isValid;\n  }\n\n  isFormValid() {\n    const simpowerValidation = this;\n\n    let isValid = true;\n\n    Object.values(simpowerValidation.fields).forEach((field) => {\n      if (!simpowerValidation.isFieldValid(field)) {\n        isValid = false;\n      }\n    });\n\n    return isValid;\n  }\n\n  async validateOnSubmit(event) {\n    const simpowerValidation = this;\n\n    if (simpowerValidation.form.submitting) {\n      return;\n    }\n\n    const config = simpowerValidation.globalConfig.validateOnSubmit;\n\n    if (config.lockFormOnValidation) {\n      simpowerValidation.lockForm();\n    }\n\n    if (hasProperty(simpowerValidation.callbacks, 'onStartValidationSubmit')) {\n      await simpowerValidation.callbacks.onStartValidationSubmit(\n        event,\n        simpowerValidation.form\n      );\n    }\n\n    simpowerValidation.form.submitting = true;\n    simpowerValidation.form.isSubmitted = true;\n\n    await Promise.all(Object.values(simpowerValidation.validationPromises));\n\n    const jobs = [];\n\n    Object.keys(simpowerValidation.fields).forEach((fieldName) => {\n      const field = simpowerValidation.getFieldObject(fieldName);\n\n      if (!field.wasValidated || config.revalidateAllFieldsBeforeSubmition) {\n        const promiseId = createId(fieldName);\n        simpowerValidation.validationPromises[promiseId] = simpowerValidation\n          .validateField(field)\n          .then((successMessage) => {\n            field.successMessage = successMessage.toString();\n          })\n          .catch((error) => {\n            if (error.name !== 'ValidationError') {\n              throw error;\n            }\n\n            field.errorMessage = error.message.toString();\n          })\n          .finally(() => {\n            simpowerValidation.setViewOnFields(field);\n            simpowerValidation.deleteMessages(field);\n            simpowerValidation.createMessages(field);\n            simpowerValidation.renderMessages(field);\n\n            delete simpowerValidation.validationPromises[promiseId];\n          });\n\n        jobs.push(simpowerValidation.validationPromises[promiseId]);\n      }\n    });\n\n    await Promise.all(jobs);\n\n    if (simpowerValidation.isFormValid()) {\n      if (hasProperty(simpowerValidation.callbacks, 'onSuccessSubmit')) {\n        await simpowerValidation.callbacks.onSuccessSubmit(\n          event,\n          simpowerValidation.form\n        );\n      }\n      simpowerValidation.form.isSubmitted = false;\n\n      simpowerValidation.refresh();\n    } else {\n      // eslint-disable-next-line no-lonely-if\n      if (hasProperty(simpowerValidation.callbacks, 'onFailSubmit')) {\n        await simpowerValidation.callbacks.onFailSubmit(\n          event,\n          simpowerValidation.form\n        );\n      }\n\n      simpowerValidation.restoreFieldsProperties(null, ['wasValidated']);\n    }\n\n    if (hasProperty(simpowerValidation.callbacks, 'onEndValidationSubmit')) {\n      await simpowerValidation.callbacks.onEndValidationSubmit(\n        event,\n        simpowerValidation.form\n      );\n    }\n\n    simpowerValidation.form.submitting = false;\n\n    if (config.lockFormOnValidation) {\n      simpowerValidation.unlockForm();\n    }\n  }\n\n  async validateOnFieldEvent(event) {\n    const simpowerValidation = this;\n\n    const { target, type } = event;\n\n    const fieldName = Object.keys(simpowerValidation.fields).find(\n      // eslint-disable-next-line no-shadow\n      (fieldName) => {\n        const field = simpowerValidation.fields[fieldName];\n        if (field.elem === target) {\n          return true;\n        }\n\n        return false;\n      }\n    );\n    const field = simpowerValidation.getFieldObject(fieldName);\n\n    if (\n      field.config.afterFirstSubmition &&\n      !simpowerValidation.form.isSubmitted\n    ) {\n      return;\n    }\n\n    const normalizedEventName = normalizeEventName(type);\n\n    if (field.config.lockInputOnValidation) {\n      field.elem.setAttribute('disabled', '');\n    }\n\n    if (\n      hasProperty(\n        simpowerValidation.callbacks,\n        `onStartValidation${normalizedEventName}`\n      )\n    ) {\n      await simpowerValidation.callbacks[\n        `onStartValidation${normalizedEventName}`\n      ](event, field);\n    }\n\n    const promiseId = createId(fieldName);\n\n    simpowerValidation.validationPromises[promiseId] = simpowerValidation\n      .validateField(field)\n      .then(async (successMessage) => {\n        field.successMessage = successMessage.toString();\n\n        if (\n          hasProperty(\n            simpowerValidation.callbacks,\n            `onSuccess${normalizedEventName}`\n          )\n        ) {\n          await simpowerValidation.callbacks[`onSuccess${normalizedEventName}`](\n            event,\n            field\n          );\n        }\n      })\n      .catch(async (error) => {\n        if (error.name !== 'ValidationError') {\n          throw error;\n        }\n\n        field.errorMessage = error.message.toString();\n\n        if (\n          hasProperty(\n            simpowerValidation.callbacks,\n            `onFail${normalizedEventName}`\n          )\n        ) {\n          await simpowerValidation.callbacks[`onFail${normalizedEventName}`](\n            event,\n            field\n          );\n        }\n      })\n      .finally(async () => {\n        if (field.config.lockInputOnValidation) {\n          field.elem.removeAttribute('disabled');\n        }\n\n        simpowerValidation.setViewOnFields(field);\n        simpowerValidation.deleteMessages(field);\n        simpowerValidation.createMessages(field);\n        simpowerValidation.renderMessages(field);\n\n        delete simpowerValidation.validationPromises[promiseId];\n\n        if (\n          hasProperty(\n            simpowerValidation.callbacks,\n            `onEndValidation${normalizedEventName}`\n          )\n        ) {\n          await simpowerValidation.callbacks[\n            `onEndValidation${normalizedEventName}`\n          ](event, field);\n        }\n      });\n  }\n\n  async validateField(field) {\n    const simpowerValidation = this;\n\n    field = simpowerValidation.getFieldObject(field);\n    field.wasValidated = true;\n\n    // eslint-disable-next-line no-restricted-syntax\n    for (const rule of field.rules) {\n      try {\n        // eslint-disable-next-line no-await-in-loop\n        await simpowerValidation.validateRule(field, rule);\n      } catch (error) {\n        field.isValid = false;\n        throw error;\n      }\n    }\n\n    field.isValid = true;\n\n    return hasProperty(field.config, 'successMessage')\n      ? field.config.successMessage\n      : 'Validation succeeded';\n  }\n\n  async validateRule(field, rule) {\n    const simpowerValidation = this;\n\n    let result;\n\n    field = simpowerValidation.getFieldObject(field);\n    const fieldValue = simpowerValidation.getFieldValue(field);\n\n    if (hasProperty(rule, 'validator')) {\n      result = await rule.validator(fieldValue);\n    } else {\n      result = true;\n    }\n\n    if (!isObject(result)) {\n      result = {\n        result,\n      };\n    }\n\n    if (!result.result) {\n      if (!hasProperty(result, 'errorMessage')) {\n        result.errorMessage = 'Rule validation failed';\n\n        if (hasProperty(rule, 'errorMessage')) {\n          result.errorMessage = rule.errorMessage;\n        }\n      }\n\n      rule.isValid = false;\n      field.isPotentiallyValid = false;\n      throw new ValidationError(result.errorMessage);\n    }\n\n    rule.isValid = true;\n    field.isPotentiallyValid = true;\n    // eslint-disable-next-line no-shadow\n    field.rules.forEach((rule) => {\n      if (hasProperty(rule, 'isValid')) {\n        if (!rule.isValid) {\n          field.isPotentiallyValid = false;\n        }\n      }\n    });\n  }\n\n  onStartValidation(callback, eventName) {\n    const simpowerValidation = this;\n\n    simpowerValidation.callbacks[\n      `onStartValidation${normalizeEventName(eventName)}`\n    ] = callback;\n\n    return simpowerValidation;\n  }\n\n  onEndValidation(callback, eventName) {\n    const simpowerValidation = this;\n\n    simpowerValidation.callbacks[\n      `onEndValidation${normalizeEventName(eventName)}`\n    ] = callback;\n\n    return simpowerValidation;\n  }\n\n  onSuccess(callback, eventName) {\n    const simpowerValidation = this;\n\n    simpowerValidation.callbacks[`onSuccess${normalizeEventName(eventName)}`] =\n      callback;\n\n    return simpowerValidation;\n  }\n\n  onFail(callback, eventName) {\n    const simpowerValidation = this;\n\n    simpowerValidation.callbacks[`onFail${normalizeEventName(eventName)}`] =\n      callback;\n\n    return simpowerValidation;\n  }\n\n  createMessages(singleField = null) {\n    const simpowerValidation = this;\n\n    const fields = singleField\n      ? [simpowerValidation.getFieldObject(singleField)]\n      : Object.values(simpowerValidation.fields);\n\n    fields.forEach((field) => {\n      if (\n        !simpowerValidation.isFieldValid(field) &&\n        field.config.ruleErrorMessages.on\n      ) {\n        const errorContainer =\n          simpowerValidation.getContainerForMessageText(field);\n        errorContainer.textContent = field.errorMessage;\n      } else if (\n        simpowerValidation.isFieldValid(field) &&\n        field.config.successfulValidationMessage.on\n      ) {\n        const successContainer =\n          simpowerValidation.getContainerForMessageText(field);\n        successContainer.textContent = field.successMessage;\n      }\n    });\n  }\n\n  deleteMessages(singleField = null, force = false) {\n    const simpowerValidation = this;\n\n    const fields = singleField\n      ? [simpowerValidation.getFieldObject(singleField)]\n      : Object.values(simpowerValidation.fields);\n\n    fields.forEach((field) => {\n      const { config } = field;\n\n      if (!simpowerValidation.isFieldValid(field)) {\n        field.successMessage = null;\n        field.successMessageIsShown = false;\n\n        if (isElementInDOM(field.successContainer)) {\n          field.successContainer.textContent = '';\n          if (\n            config.successfulValidationMessage.removeContainerFromDOMAfterFail\n          ) {\n            field.successContainer.remove();\n          }\n        }\n      } else {\n        field.errorMessage = null;\n        field.errorMessageIsShown = false;\n\n        if (isElementInDOM(field.errorContainer)) {\n          field.errorContainer.textContent = '';\n          if (\n            config.successfulValidationMessage.removeContainerFromDOMAfterFail\n          ) {\n            field.errorContainer.remove();\n          }\n        }\n      }\n\n      if (force) {\n        field.errorMessage = null;\n        field.errorMessageIsShown = false;\n        field.successMessage = null;\n        field.successMessageIsShown = false;\n\n        if (isElementInDOM(field.successContainer)) {\n          field.successContainer.textContent = '';\n          if (\n            config.successfulValidationMessage.removeContainerFromDOMAfterFail\n          ) {\n            field.successContainer.remove();\n          }\n        }\n\n        if (isElementInDOM(field.errorContainer)) {\n          field.errorContainer.textContent = '';\n          if (\n            config.successfulValidationMessage.removeContainerFromDOMAfterFail\n          ) {\n            field.errorContainer.remove();\n          }\n        }\n      }\n    });\n  }\n\n  getContainerForMessageText(field) {\n    const simpowerValidation = this;\n\n    let messageContainer = null;\n\n    field = simpowerValidation.getFieldObject(field);\n\n    if (\n      !hasProperty(field, 'errorContainer') &&\n      !simpowerValidation.isFieldValid(field)\n    ) {\n      const config = field.config.ruleErrorMessages;\n\n      if (config.container) {\n        field.errorContainer = isDOMElement(config.container)\n          ? config.container\n          : document.querySelector(field);\n      } else {\n        field.errorContainer = document.createElement('div');\n\n        if (config.classes) {\n          field.errorContainer.classList.add(...config.classes);\n        }\n      }\n    } else if (\n      !hasProperty(field, 'successContainer') &&\n      simpowerValidation.isFieldValid(field)\n    ) {\n      const config = field.config.successfulValidationMessage;\n\n      if (config.container) {\n        field.successContainer = isDOMElement(config.container)\n          ? config.container\n          : document.querySelector(field);\n      } else {\n        field.successContainer = document.createElement('div');\n\n        if (config.classes) {\n          field.successContainer.classList.add(...config.classes);\n        }\n      }\n    }\n\n    if (!simpowerValidation.isFieldValid(field)) {\n      messageContainer = field.errorContainer;\n    } else {\n      messageContainer = field.successContainer;\n    }\n\n    return messageContainer;\n  }\n\n  renderMessages(singleField = null) {\n    const simpowerValidation = this;\n\n    const fields = singleField\n      ? [simpowerValidation.getFieldObject(singleField)]\n      : Object.values(simpowerValidation.fields);\n\n    fields.forEach((field) => {\n      let messageContainer = null;\n      let messageContainerPossition = null;\n\n      if (\n        simpowerValidation.isFieldValid(field) &&\n        isEmpty(simpowerValidation.getFieldValue(field))\n      ) {\n        return;\n      }\n\n      if (!simpowerValidation.isFieldValid(field)) {\n        const config = field.config.ruleErrorMessages;\n\n        if (config.on) {\n          if (!isElementInDOM(field.errorContainer)) {\n            messageContainer = field.errorContainer;\n            messageContainerPossition = config.position;\n          }\n        }\n      } else {\n        const config = field.config.successfulValidationMessage;\n\n        if (config.on) {\n          if (!isElementInDOM(field.successContainer)) {\n            messageContainer = field.successContainer;\n            messageContainerPossition = config.position;\n          }\n        }\n      }\n\n      try {\n        insert(messageContainer, messageContainerPossition);\n\n        if (!simpowerValidation.isFieldValid(field)) {\n          field.errorMessageIsShown = true;\n        } else {\n          field.successMessageIsShown = true;\n        }\n      } catch (err) {\n        if (\n          err.name === 'TypeError' &&\n          err.message === 'Position parameter is invalid.'\n        ) {\n          field.elem.after(messageContainer);\n        } else if (\n          err.name !== 'TypeError' &&\n          (err.message !== 'ElementToBeInserted parameter is invalid.' ||\n            err.message === 'Position parameter is invalid.')\n        ) {\n          throw err;\n        }\n      }\n    });\n  }\n\n  setViewOnFields(singleField = null) {\n    const simpowerValidation = this;\n\n    const fields = singleField\n      ? [simpowerValidation.getFieldObject(singleField)]\n      : Object.values(simpowerValidation.fields);\n\n    fields.forEach((field) => {\n      const { elem, config } = field;\n\n      if (simpowerValidation.isFieldValid(field)) {\n        if (config.invalidViewOfField.classes) {\n          elem.classList.remove(...config.invalidViewOfField.classes);\n        }\n\n        if (config.validViewOfField.on && config.validViewOfField.classes) {\n          elem.classList.add(...config.validViewOfField.classes);\n        }\n      } else {\n        if (config.validViewOfField.classes) {\n          elem.classList.remove(...config.validViewOfField.classes);\n        }\n\n        if (config.invalidViewOfField.on && config.invalidViewOfField.classes) {\n          elem.classList.add(...config.invalidViewOfField.classes);\n        }\n      }\n    });\n  }\n\n  lockForm() {\n    const simpowerValidation = this;\n\n    const allFormElements = simpowerValidation.form.elem.querySelectorAll(\n      'input, textarea, button, select'\n    );\n\n    Array.from(allFormElements).forEach((field) => {\n      field.setAttribute('disabled', '');\n      field.style.pointerEvents = 'none';\n      field.style.webkitFilter = 'grayscale(100%)';\n      field.style.filter = 'grayscale(100%)';\n    });\n  }\n\n  unlockForm() {\n    const simpowerValidation = this;\n\n    const allFormElements = simpowerValidation.form.elem.querySelectorAll(\n      'input, textarea, button, select'\n    );\n\n    Array.from(allFormElements).forEach((field) => {\n      field.removeAttribute('disabled');\n      field.style.pointerEvents = '';\n      field.style.webkitFilter = '';\n      field.style.filter = '';\n    });\n  }\n}\n\nexport { SimpowerValidation };\n","function isEmpty(value) {\n  let newVal = value;\n  if (typeof value === 'string') {\n    newVal = value.trim();\n  }\n  return !newVal;\n}\n\nexport { isEmpty };\n","function insert(\n  elementToBeInserted,\n  position = {\n    append: null,\n    prepand: null,\n    after: null,\n    before: null,\n  }\n) {\n  if (!elementToBeInserted) {\n    throw new TypeError('ElementToBeInserted parameter is invalid.');\n  }\n\n  if (!position) {\n    throw new TypeError('Position parameter is invalid.');\n  }\n\n  let DOMObject;\n\n  if (typeof position.append !== 'undefined') {\n    DOMObject =\n      typeof position.append === 'object'\n        ? position.append\n        : document.querySelector(position.append);\n    DOMObject.append(elementToBeInserted);\n  } else if (typeof position.prepend !== 'undefined') {\n    DOMObject =\n      typeof position.prepend === 'object'\n        ? position.prepend\n        : document.querySelector(position.prepend);\n    DOMObject.prepend(elementToBeInserted);\n  } else if (typeof position.after !== 'undefined') {\n    DOMObject =\n      typeof position.after === 'object'\n        ? position.after\n        : document.querySelector(position.after);\n    DOMObject.after(elementToBeInserted);\n  } else if (typeof position.before !== 'undefined') {\n    DOMObject =\n      typeof position.before === 'object'\n        ? position.before\n        : document.querySelector(position.before);\n    DOMObject.before(elementToBeInserted);\n  } else {\n    throw new TypeError('Position parameter is invalid.');\n  }\n}\n\nexport { insert };\n"],"names":["obj","_simpowerValidation","require","__esModule","default","ssatForm","document","querySelector","ssatText","elements","ssatUserName","ssatUserEmail","validation","SimpowerValidation","validateFieldOnEvent","event","afterFirstSubmition","lockInputOnValidation","validateOnSubmit","lockFormOnValidation","revalidateAllFieldsBeforeSubmition","addField","validator","inputValue","trim","errorMessage","ruleErrorMessages","on","position","prepand","removeContainerFromDOMAfterSuccess","classes","invalidViewOfField","match","append","onSuccess","fetch","method","body","JSON","stringify","text","value","name","email","headers","then","response","json","console","log","defaults","fieldValueHandler","container","successfulValidationMessage","successMessage","removeContainerFromDOMAfterFail","validViewOfField","hasProperty","property","allProperties","properties","lastPrototype","Object","getPrototypeOf","allPropertiesAndGetters","getters","getOwnPropertyNames","splice","indexOf","getAllOwnProperties","includes","prototype","hasOwnProperty","call","isObject","element","Array","isArray","extendParams","params","extendedParams","keys","forEach","param","isDOMElement","HTMLElement","err","TypeError","normalizeEventName","charAt","toUpperCase","substring","toLowerCase","createId","string","Math","random","toString","isElementInDOM","parentNode","ValidationError","constructor","message","super","this","parentElement","globalConfig","simpowerValidation","eventHandlers","Map","form","elem","formElements","submitting","isSubmitted","fields","validationPromises","callbacks","setAttribute","addListener","preventDefault","bind","type","handler","handlerName","fieldToBeValidate","values","field","set","addEventListener","removeListener","handlersContainer","key","removeEventListener","get","delete","rules","config","length","fieldName","getAttribute","defaultValue","isValid","isPotentiallyValid","wasValidated","errorMessageIsShown","successMessageIsShown","setValidationRules","propertiesToBeRestoreAfterRefresh","getFieldObject","rulesByEvent","submit","rule","push","validateOnFieldEvent","removeField","deleteSuccesses","deleteErrors","getFieldValue","fieldValue","fieldObject","checked","files","clearFields","singleField","reset","restoreFieldsProperties","refresh","deleteMessages","isFieldValid","isFormValid","lockForm","onStartValidationSubmit","Promise","all","jobs","promiseId","validateField","catch","error","finally","setViewOnFields","createMessages","renderMessages","onSuccessSubmit","onFailSubmit","onEndValidationSubmit","unlockForm","target","find","normalizedEventName","async","removeAttribute","validateRule","result","onStartValidation","callback","eventName","onEndValidation","onFail","getContainerForMessageText","textContent","force","errorContainer","remove","successContainer","messageContainer","createElement","classList","add","messageContainerPossition","newVal","isEmpty","elementToBeInserted","after","before","DOMObject","prepend","insert","allFormElements","querySelectorAll","from","style","pointerEvents","webkitFilter","filter"],"sourceRoot":""}